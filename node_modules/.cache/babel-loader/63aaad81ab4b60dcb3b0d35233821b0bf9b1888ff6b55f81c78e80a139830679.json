{"ast":null,"code":"var _s = $RefreshSig$();\n//리다이렉트될 화면\n\nimport axios from 'axios';\nimport React, { useEffect } from 'react';\nimport { Navigate, useNavigate } from 'react-router-dom';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Kakao = props => {\n  _s();\n  const navigate = useNavigate();\n  //인가 코드 받기\n  let code = new URL(window.location.href).searchParams.get('code');\n  let grant_type = 'authorization_code';\n  let client_id = 'dcb8c3b23d720c296085cbdc9046ece9';\n  useEffect(() => {\n    try {\n      const res = async () => await axios.post(`https://kauth.kakao.com/oauth/token?\n        grant_type=${grant_type}\n        &client_id=${client_id}\n        &redirect_uri=http://localhost:3000/oauth\n        &code=${code}`, {\n        headers: {\n          'Content-type': 'application/x-www-form-urlencoded;charset=utf-8'\n        }\n      }).then(res => {\n        console.log(res);\n        const {\n          data\n        } = res;\n        const {\n          access_token\n        } = data;\n        if (access_token) {\n          console.log(`Bearer${access_token}`);\n          axios.post('https://kapi.kakao.com/v2/user/me', {}, {\n            headers: {\n              Authorization: `Bearer ${access_token}`,\n              'Content-Type': 'application/x-www-form-urlencoded'\n            }\n          }).then(res => {\n            console.log('데이터 성공');\n            console.log(res);\n          });\n        } else {\n          console.log('access_token 없음');\n        }\n        //인가코드를 서버로 전송\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(Kakao, \"0pNeyzXk/ByIxyERsdaIrG6js9s=\", false, function () {\n  return [useNavigate];\n});\n_c = Kakao;\nexport default Kakao;\nvar _c;\n$RefreshReg$(_c, \"Kakao\");","map":{"version":3,"names":["axios","React","useEffect","Navigate","useNavigate","Fragment","_Fragment","jsxDEV","_jsxDEV","Kakao","props","_s","navigate","code","URL","window","location","href","searchParams","get","grant_type","client_id","res","post","headers","then","console","log","data","access_token","Authorization","e","_c","$RefreshReg$"],"sources":["C:/Users/user/OneDrive/madcamp/week3/test/test/src/Kakao.js"],"sourcesContent":["//리다이렉트될 화면\r\n\r\nimport axios from 'axios'\r\nimport React, { useEffect } from 'react'\r\n\r\nimport { Navigate, useNavigate } from 'react-router-dom'\r\n\r\nconst Kakao = props => {\r\n  const navigate = useNavigate()\r\n  //인가 코드 받기\r\n  let code = new URL(window.location.href).searchParams.get('code')\r\n  let grant_type = 'authorization_code'\r\n  let client_id = 'dcb8c3b23d720c296085cbdc9046ece9'\r\n  useEffect(() => {\r\n    try {\r\n      const res = async () =>\r\n        await axios\r\n          .post(\r\n            `https://kauth.kakao.com/oauth/token?\r\n        grant_type=${grant_type}\r\n        &client_id=${client_id}\r\n        &redirect_uri=http://localhost:3000/oauth\r\n        &code=${code}`,\r\n            {\r\n              headers: {\r\n                'Content-type':\r\n                  'application/x-www-form-urlencoded;charset=utf-8',\r\n              },\r\n            }\r\n          )\r\n          .then(res => {\r\n            console.log(res)\r\n            const { data } = res\r\n            const { access_token } = data\r\n\r\n            if (access_token) {\r\n              console.log(`Bearer${access_token}`)\r\n              axios\r\n                .post(\r\n                  'https://kapi.kakao.com/v2/user/me',\r\n                  {},\r\n                  {\r\n                    headers: {\r\n                      Authorization: `Bearer ${access_token}`,\r\n                      'Content-Type': 'application/x-www-form-urlencoded',\r\n                    },\r\n                  }\r\n                )\r\n                .then(res => {\r\n                  console.log('데이터 성공')\r\n                  console.log(res)\r\n                })\r\n            } else {\r\n              console.log('access_token 없음')\r\n            }\r\n            //인가코드를 서버로 전송\r\n          })\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }, [])\r\n  return <></>\r\n}\r\n\r\nexport default Kakao\r\n"],"mappings":";AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAExC,SAASC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExD,MAAMC,KAAK,GAAGC,KAAK,IAAI;EAAAC,EAAA;EACrB,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B;EACA,IAAIS,IAAI,GAAG,IAAIC,GAAG,CAACC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAC,CAACC,YAAY,CAACC,GAAG,CAAC,MAAM,CAAC;EACjE,IAAIC,UAAU,GAAG,oBAAoB;EACrC,IAAIC,SAAS,GAAG,kCAAkC;EAClDnB,SAAS,CAAC,MAAM;IACd,IAAI;MACF,MAAMoB,GAAG,GAAG,MAAAA,CAAA,KACV,MAAMtB,KAAK,CACRuB,IAAI,CACF;AACb,qBAAqBH,UAAW;AAChC,qBAAqBC,SAAU;AAC/B;AACA,gBAAgBR,IAAK,EAAC,EACV;QACEW,OAAO,EAAE;UACP,cAAc,EACZ;QACJ;MACF,CACF,CAAC,CACAC,IAAI,CAACH,GAAG,IAAI;QACXI,OAAO,CAACC,GAAG,CAACL,GAAG,CAAC;QAChB,MAAM;UAAEM;QAAK,CAAC,GAAGN,GAAG;QACpB,MAAM;UAAEO;QAAa,CAAC,GAAGD,IAAI;QAE7B,IAAIC,YAAY,EAAE;UAChBH,OAAO,CAACC,GAAG,CAAE,SAAQE,YAAa,EAAC,CAAC;UACpC7B,KAAK,CACFuB,IAAI,CACH,mCAAmC,EACnC,CAAC,CAAC,EACF;YACEC,OAAO,EAAE;cACPM,aAAa,EAAG,UAASD,YAAa,EAAC;cACvC,cAAc,EAAE;YAClB;UACF,CACF,CAAC,CACAJ,IAAI,CAACH,GAAG,IAAI;YACXI,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;YACrBD,OAAO,CAACC,GAAG,CAACL,GAAG,CAAC;UAClB,CAAC,CAAC;QACN,CAAC,MAAM;UACLI,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;QAChC;QACA;MACF,CAAC,CAAC;IACR,CAAC,CAAC,OAAOI,CAAC,EAAE;MACVL,OAAO,CAACC,GAAG,CAACI,CAAC,CAAC;IAChB;EACF,CAAC,EAAE,EAAE,CAAC;EACN,oBAAOvB,OAAA,CAAAF,SAAA,mBAAI,CAAC;AACd,CAAC;AAAAK,EAAA,CAvDKF,KAAK;EAAA,QACQL,WAAW;AAAA;AAAA4B,EAAA,GADxBvB,KAAK;AAyDX,eAAeA,KAAK;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}