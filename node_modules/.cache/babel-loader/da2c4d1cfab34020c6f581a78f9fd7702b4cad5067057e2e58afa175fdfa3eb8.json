{"ast":null,"code":"var _s = $RefreshSig$();\n//리다이렉트될 화면\n\nimport axios from 'axios';\nimport React, { useEffect } from 'react';\nimport Main from './Main';\nimport Login from './Login';\nimport { Navigate, useNavigate } from 'react-router-dom';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Kakao = props => {\n  _s();\n  const navigate = useNavigate();\n  //인가 코드 받기\n  let code = new URL(window.location.href).searchParams.get('code');\n  let grant_type = 'authorization_code';\n  let client_id = 'dcb8c3b23d720c296085cbdc9046ece9';\n  const API_URL = 'http://172.10.5.102:80';\n\n  //인가 코드 전달\n  const auth_code = async () => {\n    try {\n      const response = await axios({\n        method: 'post',\n        url: `${API_URL}/kakao`,\n        data: {\n          data: code\n        }\n      });\n      console.log(response.data);\n      //const data = await response.json()\n      const token = response.data.token;\n      const isNewUser = response.data.isNewUser;\n      console.log('token:', token);\n\n      //토큰을 로컬 스토리지에 저장\n      localStorage.setItem('user_token', token);\n      if (isNewUser) {\n        navigate('/Login');\n      } else {\n        navigate('/Main');\n      }\n    } catch (error) {\n      if (error.response) {\n        // 서버에서 응답을 받았지만, HTTP 상태 코드가 200(성공) 범위에 있지 않은 경우\n        console.error('응답 오류:', error.response.status, error.response.data);\n      } else if (error.request) {\n        // 서버에서 응답을 받지 않았지만, 클라이언트 측에서 요청을 보낸 경우(네트워크 에러 등)\n        console.error('네트워크 오류:', error.request);\n      } else {\n        // axios의 설정이나 다른 요청 생성 중에 발생한 오류\n        console.error('요청 오류:', error);\n      }\n    }\n  };\n  auth_code();\n\n  //권한이 필요한 api 요청을 보낼때 이 토큰을 불러와서 authorization 헤더에 포함\n  async function fetchData() {\n    // 로컬 스토리지에서 토큰 가져오기\n    const token = localStorage.getItem('user_token');\n    try {\n      const response = await fetch('https://your-server.com/api/some-secured-data', {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      console.log('Data from secured API:', data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(Kakao, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = Kakao;\nexport default Kakao;\nvar _c;\n$RefreshReg$(_c, \"Kakao\");","map":{"version":3,"names":["axios","React","useEffect","Main","Login","Navigate","useNavigate","Fragment","_Fragment","jsxDEV","_jsxDEV","Kakao","props","_s","navigate","code","URL","window","location","href","searchParams","get","grant_type","client_id","API_URL","auth_code","response","method","url","data","console","log","token","isNewUser","localStorage","setItem","error","status","request","fetchData","getItem","fetch","headers","Authorization","json","_c","$RefreshReg$"],"sources":["C:/Users/user/OneDrive/madcamp/week3/test/test/src/Kakao.js"],"sourcesContent":["//리다이렉트될 화면\r\n\r\nimport axios from 'axios'\r\nimport React, { useEffect } from 'react'\r\nimport Main from './Main'\r\nimport Login from './Login'\r\nimport { Navigate, useNavigate } from 'react-router-dom'\r\n\r\nconst Kakao = props => {\r\n  const navigate = useNavigate()\r\n  //인가 코드 받기\r\n  let code = new URL(window.location.href).searchParams.get('code')\r\n  let grant_type = 'authorization_code'\r\n  let client_id = 'dcb8c3b23d720c296085cbdc9046ece9'\r\n  const API_URL = 'http://172.10.5.102:80'\r\n\r\n  //인가 코드 전달\r\n  const auth_code = async () => {\r\n    try {\r\n      const response = await axios({\r\n        method: 'post',\r\n        url: `${API_URL}/kakao`,\r\n        data: { data: code },\r\n      })\r\n      console.log(response.data)\r\n      //const data = await response.json()\r\n      const token = response.data.token\r\n      const isNewUser = response.data.isNewUser\r\n      console.log('token:', token)\r\n\r\n      //토큰을 로컬 스토리지에 저장\r\n      localStorage.setItem('user_token', token)\r\n      if (isNewUser) {\r\n        navigate('/Login')\r\n      } else {\r\n        navigate('/Main')\r\n      }\r\n    } catch (error) {\r\n      if (error.response) {\r\n        // 서버에서 응답을 받았지만, HTTP 상태 코드가 200(성공) 범위에 있지 않은 경우\r\n        console.error('응답 오류:', error.response.status, error.response.data)\r\n      } else if (error.request) {\r\n        // 서버에서 응답을 받지 않았지만, 클라이언트 측에서 요청을 보낸 경우(네트워크 에러 등)\r\n        console.error('네트워크 오류:', error.request)\r\n      } else {\r\n        // axios의 설정이나 다른 요청 생성 중에 발생한 오류\r\n        console.error('요청 오류:', error)\r\n      }\r\n    }\r\n  }\r\n  auth_code()\r\n\r\n  //권한이 필요한 api 요청을 보낼때 이 토큰을 불러와서 authorization 헤더에 포함\r\n  async function fetchData() {\r\n    // 로컬 스토리지에서 토큰 가져오기\r\n    const token = localStorage.getItem('user_token')\r\n\r\n    try {\r\n      const response = await fetch(\r\n        'https://your-server.com/api/some-secured-data',\r\n        {\r\n          method: 'GET',\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      )\r\n\r\n      const data = await response.json()\r\n      console.log('Data from secured API:', data)\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error)\r\n    }\r\n  }\r\n  return <></>\r\n}\r\n\r\nexport default Kakao\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}